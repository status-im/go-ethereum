diff --git a/accounts/keystore/key.go b/accounts/keystore/key.go
index 03f7d59ea..1873c8218 100644
--- a/accounts/keystore/key.go
+++ b/accounts/keystore/key.go
@@ -47,12 +47,8 @@ type Key struct {
 	// we only store privkey as pubkey/address can be derived from it
 	// privkey in this struct is always in plaintext
 	PrivateKey *ecdsa.PrivateKey
-	// ExtendedKey is the extended key of the PrivateKey itself, and it's used
-	// to derive child keys.
+	// extended key is the root node for new hardened children i.e. sub-accounts
 	ExtendedKey *extkeys.ExtendedKey
-	// SubAccountIndex is DEPRECATED
-	// It was use in Status to keep track of the number of sub-account created
-	// before having multi-account support.
 	// next index to be used for sub-account child derivation
 	SubAccountIndex uint32
 }
diff --git a/accounts/keystore/keystore.go b/accounts/keystore/keystore.go
index defc35b4f..0a183aa68 100644
--- a/accounts/keystore/keystore.go
+++ b/accounts/keystore/keystore.go
@@ -38,7 +38,6 @@ import (
 	"github.com/ethereum/go-ethereum/core/types"
 	"github.com/ethereum/go-ethereum/crypto"
 	"github.com/ethereum/go-ethereum/event"
-	"github.com/pborman/uuid"
 	"github.com/status-im/status-go/extkeys"
 )
 
@@ -460,39 +459,6 @@ func (ks *KeyStore) ImportECDSA(priv *ecdsa.PrivateKey, passphrase string) (acco
 	return ks.importKey(key, passphrase)
 }
 
-// ImportSingleExtendedKey imports an extended key setting it in both the PrivateKey and ExtendedKey fields
-// of the Key struct.
-// ImportExtendedKey is used in older version of Status where PrivateKey is set to be the BIP44 key at index 0,
-// and ExtendedKey is the extended key of the BIP44 key at index 1.
-func (ks *KeyStore) ImportSingleExtendedKey(extKey *extkeys.ExtendedKey, passphrase string) (accounts.Account, error) {
-	privateKeyECDSA := extKey.ToECDSA()
-	id := uuid.NewRandom()
-	key := &Key{
-		Id:          id,
-		Address:     crypto.PubkeyToAddress(privateKeyECDSA.PublicKey),
-		PrivateKey:  privateKeyECDSA,
-		ExtendedKey: extKey,
-	}
-
-	// if account is already imported, return cached version
-	if ks.cache.hasAddress(key.Address) {
-		a := accounts.Account{
-			Address: key.Address,
-		}
-		ks.cache.maybeReload()
-		ks.cache.mu.Lock()
-		a, err := ks.cache.find(a)
-		ks.cache.mu.Unlock()
-		if err != nil {
-			zeroKey(key.PrivateKey)
-			return a, err
-		}
-		return a, nil
-	}
-
-	return ks.importKey(key, passphrase)
-}
-
 // ImportExtendedKey stores ECDSA key (obtained from extended key) along with CKD#2 (root for sub-accounts)
 // If key file is not found, it is created. Key is encrypted with the given passphrase.
 func (ks *KeyStore) ImportExtendedKey(extKey *extkeys.ExtendedKey, passphrase string) (accounts.Account, error) {
